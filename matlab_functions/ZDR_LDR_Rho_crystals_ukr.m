%% Встановлюємо початкові значення основних параметрів
clear;
clc;
global wavelength; 
global eps_r;
wavelength=32; % задаємо довжину хвилі в мм
eps_r=3; % Задаємо значення діелектріченої проникності

ZDR_crystals(10,1)=zeros; % Масив нулів для подальшого розрахунку ДВ
LDR_crystals(10,1)=zeros; % Масив нулів для подальшого розрахунку ЛДВ
Rho_crystals(10,1)=zeros; % Масив нулів для подальшого розрахунку КК

n=200000; % Загальне кількіть точок
k_min=n; % Мінімальна кількість точок
s=0; % Змінна-перемикач, використовується для відтворення розподілу
     % точок на поверхні одиничної сфери тільки 1 раз

  Phh_crystals(10,n)=zeros; % Масив нулів для подальшого розрахунку
                            % коефіцієнтів форми
  Phv_crystals(10,n)=zeros;
  Pvv_crystals(10,n)=zeros;

  j=1; % Ця змінна використовується для індексації значень масивів
       % при зберіганні розрахунків для різних кутів місця

  
 for teta_deg=0:20:180 % Перебираємо кути місця нахилу антени радіолокатора
  %% Задаємо розподіл точок на поверхні одиничної сфери 
  for L=0.1:0.1:8 % задаем размер кристала
    r=1; % Радіус кулі з центром в (0,0,0)
    X=zeros(1,n);% Масиви зберігання координат точок
    Y=zeros(1,n);
    Z=zeros(1,n);
     
    k=0; % Лічильник точок, що потрапили всередину кулі
    Er=0.01; % похибка
      for i=1:n
            x=randn/pi; % Нова можлива координата по осі X
            y=randn/pi; % Нова можлива координата по осі Y
            z=randn/pi; % Нова можлива координата по осі Z
            % Таким чином задається рівноймовірний розподіл
            
            % z=(1-2*rand);
            ro2=x^2+y^2+z^2; % Квадрат відстані від точки до центру
            if abs(ro2-r^2)<=Er % Обмеження по радіусу
                 k=k+1; % Дана точка потрапила в коло
                 X(k)=x;
                 Y(k)=y;
                 Z(k)=z;   
            end
       end
  
      if k<k_min
           k_min=k;
      end     
    
    X=X(1:k_min); % Видаляємо непотрібні нулі
    Y=Y(1:k_min);
    Z=Z(1:k_min);
     if s==0 % Перевірка, чи був даний графік вже намальований
       plot3(X,Y,Z,'.') 
       % В результаті отримаємо зображення розподілу точок по
       % поверхні одиничної сфери. Тут видно, що розподіл - рівномірний
     end 
%% Перетворюємо систему координат

    [alphaU deltaU R]=cart2sph(X,Y,Z); % Переходимо від Декартової системи
                                       % координат до сферичної

    
                                       
    alpha=pi/2+alphaU; 
    delta=3*pi/2-deltaU;
    % Перетворюємо кути alpha і delta відповідно до тих,
    % що використовуються у формулах 2.51-2.53 глави 2 дисертації

    
    
    phi=0; % Задаємо кут повороту горизонтальної площини поляризації
    teta=teta_deg*pi/180; % Переводимо з градусів в радіани
    
    
    %% Малюємо сукупність кристалів із заданим розподілом в просторі
    if s==0  % Перевірка, чи був даний графік вже намальований
        figure;
        hold on
        for i=1:length(alpha)
          illustrate(alpha(i),delta(i),0,0,3); 
          % Ця функція малює еліпсоїд із заданими співвідношенням сторін
          % і положенням в просторі

          
        end
        axis([-2 2 -2 2 -2 2]);
    end
    s=1;
    % На цьому графіку також видно, що розподіл - рівномірний
    %% Обчислюємо значення поляриметричних параметрів
    for i=1:k_min
            [hh vv hv]=q(alpha(i),delta(i),phi,teta,L);
               Phh_crystals(j,i)=Phh_crystals(j,i)+hh*N_fun(L)*fun_sigma(L); 
               Pvv_crystals(j,i)=Pvv_crystals(j,i)+vv*N_fun(L)*fun_sigma(L);
               Phv_crystals(j,i)=Phv_crystals(j,i)+hv*N_fun(L)*fun_sigma(L);
                % Phh_crystals(j,i)=Phh_crystals(j,i)+hh*N_fun(fun_d(L))*fun_sigma(fun_d(L));
                % Pvv_crystals(j,i)=Pvv_crystals(j,i)+vv*N_fun(fun_d(L))*fun_sigma(fun_d(L));
                % Phv_crystals(j,i)=Phv_crystals(j,i)+hv*N_fun(fun_d(L))*fun_sigma(fun_d(L));
                % Закоментовані три верхні строки  використовуються для
                % моделювання відбиття від пластинчастих кристалів

        end
  end    
    ZDR_crystals(j,1)=10*log10(sum(Phh_crystals(j,1:k_min))/sum(Pvv_crystals(j,1:k_min))); 
    % Обчислюємо значення ДВ для сукупності частинок
    
    LDR_crystals(j,1)=10*log10(sum(Phv_crystals(j,1:k_min))/sum(Pvv_crystals(j,1:k_min))); 
    % Обчислюємо значення ЛДВ для сукупності частинок
    
    Rho=corrcoef(Phh_crystals(j,:),Pvv_crystals(j,:));  
    Rho_crystals(j)=Rho(1,2);
    % Вычисляем значения КК для совокупности частиц
    
  j=j+1;
 end
 % Переходимо до розрахунків для наступного кута місця

 %% Будуємо графіки функцій
angles=0:20:180;
    
figure; % Створюємо нове вікно

subplot(1,3,1), plot(angles,ZDR_crystals),
ylabel('Differential Reflectivity, dB'); 
% Будуємо графік залежності ДВ від кута сканування антени радіолокатора
grid on;
axis([0 180 -3 3])

subplot(1,3,2), plot(angles,LDR_crystals),
xlabel ('teta, deg'), ylabel('Linear Depolarization Ratio, dB'); 
% Будуємо графік залежності ЛДВ від кута сканування антени радіолокатора
grid on;
axis([0 180 -50 1]);

subplot(1,3,3), plot(angles,Rho_crystals);
ylabel('Correlation Coefficient, dB'); 
% Будуємо графік залежності КК від кута сканування антени радіолокатора
grid on;
axis([0 180 0.9 1.1]);

%% Малюємо зовнішній вигляд еліпсоїда, що емулює форму кристала льоду
figure;
a1=fun_a1(L);
a3=fun_a3(L);
[x,y,z] = ellipsoid(0,0,0,a1,a1,a3,20);
h=surf(x,y,z);
axis([-5 5 -5 5 -5 5]);
